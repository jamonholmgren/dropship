#!/bin/bash

# Dropship CLI, by Jamon Holmgren
VERSION="0.1.0"

main() {

	# Check prerequisites
	check_doctl
	check_brew

	# Header
	p ""
	p "${BLUE_BOLD}Dropship -- Ship your app to a DigitalOcean Droplet${END}"
	p ""

	# Version
	if [[ $1 == "-v" || $1 == "--version" ]]; then
		p "${VERSION}"
		return 0
	fi

	# Setup command
	if [[ $1 == "setup" ]]; then
		# # Prerequisite: `doctl`
		# p "Dropship uses DigitalOcean's ${YELLOW_BOLD}doctl${END} CLI tool to set up Droplets."
		# p ""

		# if $DOCTL_INSTALLED; then
		# 	p "${GREEN}✅ doctl is installed!${END}"
		# else
		# 	if ! install_doctl; then
		# 		p ""
		# 		return 1
		# 	fi
		# fi

		# Gather all the info up front
		ask DOMAIN "${YELLOW}What domain will this be hosted on?${END} ${DKGRAY}(e.g. dropship.jamon.dev)${END}" validate_domain
		ask DEPLOY_REMOTE "${YELLOW}What should we name the git remote?${END} ${DKGRAY}(e.g. droplet)${END}" validate_remote
		ask DROPLET_NAME "${YELLOW}What is the Droplet name?${END} ${DKGRAY}(e.g. my-awesome-droplet)" validate_droplet

		p "${YELLOW}Please sign up for DigitalOcean if you have not yet:${END}"
		p ""
		p "${CYAN}https://m.do.co/c/a78810eb0cff${END} (\$200 credit)"
		p ""
		wait_for_key

		if ask_yn "Do you need me to create a Droplet for you?"; then
			# Prerequisite: `doctl`
			p "Dropship uses DigitalOcean's ${YELLOW_BOLD}doctl${END} CLI tool to set up Droplets."
			p ""

			if $DOCTL_INSTALLED; then
				p "${GREEN}✅ doctl is installed!${END}"
			else
				if ! install_doctl; then
					p ""
					return 1
				fi
			fi

			p "${YELLOW}Authenticating with DigitalOcean...${END}"
			p ""
			p "Note: when you create a Personal Access Token, enable at least these scopes:"
			p "${YELLOW_BOLD}certificate${END} (create, read)"
			p "${YELLOW_BOLD}domain${END} (create, read, update)"
			p "${YELLOW_BOLD}droplet${END} (create, read, update)"
			p "${YELLOW_BOLD}ssh_key${END} (create, read)"
			p "${YELLOW_BOLD}sizes${END} (read)"
			p ""

			if ! doctl auth init; then
				p "${RED}Authentication failed. Please check the following:${END}"
				p "1. ${YELLOW}Ensure you have a valid DigitalOcean API token${END}"
				p "2. ${YELLOW}Check your internet connection${END}"
				p "3. ${YELLOW}Verify that doctl is properly installed${END}"
				p ""
				p "${CYAN}For more information on creating an API token, visit:${END}"
				p "${DKGRAY}Docs: https://docs.digitalocean.com/reference/api/create-personal-access-token/${END}"
				p "${DKGRAY}Link: https://cloud.digitalocean.com/account/api/tokens${END}"
				p ""
				p "${YELLOW}If the problem persists, please try running 'doctl auth init' manually for more detailed error messages.${END}"
				p ""
				return 1
			fi

			p "${GREEN}Authentication successful!${END}"

			if ! create_droplet "$DROPLET_NAME"; then
				p ""
				p "${RED}Failed to create Droplet. Please exit and try again or create one manually.${END}"
				p "${GRAY}View your current droplets here: https://cloud.digitalocean.com/droplets${END}"
				p ""
			fi

			# Add more steps here as needed, such as setting up SSH keys, etc.
		else
			p "${YELLOW}Please create a Droplet manually and note its IP address.${END}"
		fi

		ask DROPLET_IP "${YELLOW}What is the Droplet's IP address?${END}" validate_ip

		p "" # Manual steps that I still need to script:
		p "${GREEN}Deployment setup complete!${END}"
		p ""
		p "${YELLOW}Next steps:${END}"
		p ""
		p "  git push ${DEPLOY_REMOTE}"
		p ""
		p "${YELLOW}Support Dropship development:${END}"
		p ""
		p "  ${CYAN}Star the repo: ${DKGRAY}https://github.com/jamonholmgren/dropship${END}"
		p "  ${CYAN}Tell me what you're making with it: ${DKGRAY}https://x.com/jamonholmgren${END}"
		p ""

		return 0
	fi

	# If we don't recognize $1, say that
	if [[ -n $1 && $1 != "-h" && $1 != "--help" ]]; then
		p "${RED}Unrecognized command: $1${END}"
		p "Run 'dropship --help' for usage information."
		p ""
		return 1
	fi

	# Otherwise, print help

	p "${YELLOW}Installation:${END}"
	p ""
	p "${CYAN}alias dropship='source <(curl -sSL https://raw.githubusercontent.com/jamonholmgren/dropship/main/dropship)'${END}"
	p ""
	p "${CYAN}Usage:${END} dropship [command|option]"
	p ""
	p "${CYAN}Commands:${END}"
	p "  setup           Set up deployment to a DigitalOcean Droplet"
	p ""
	p "${CYAN}Options:${END}"
	p "  -h, --help      Show help"
	p "  -v, --version   Show version number"
	p ""
	p "${CYAN}Examples:${END}"
	p "  dropship --help"
	p "  dropship -v"
	p "  dropship setup"
	p ""
	p "If you need more help, please visit:"
	p "  ${DKGRAY}https://github.com/jamonholmgren/dropship${END}"
	p ""
	return 0
}

function ask() {
	local domain_var="$1"
	local prompt_message="$2"
	local validation_func="$3"
	local error_message="${RED}Invalid input.${END}"

	while true; do
		if [[ -z "${!domain_var}" ]]; then
			p "$prompt_message"
			read -r "${domain_var?}"
		fi

		if [[ -n "${!domain_var}" ]]; then
			if [[ -n "$validation_func" ]]; then
				if $validation_func "${!domain_var}"; then
					break
				else
					p "$error_message"
					unset "${domain_var}"
				fi
			else
				break
			fi
		else
			p "${RED}Cannot be empty.${END}"
		fi
	done
}

function p() {
	echo -e "$1"
}

function validate_domain() {
	local domain="$1"
	if [[ $domain =~ ^[a-zA-Z0-9\.\-]+$ ]]; then
		return 0
	else
		p "${RED}Domain name can only contain numbers, letters, dashes, and periods.${END}"
		return 1
	fi
}

function validate_remote() {
	local remote="$1"
	if [[ $remote =~ ^[a-zA-Z0-9_\-]+$ ]]; then
		return 0
	else
		p "${RED}Remote name can only contain letters, numbers, underscores, and hyphens.${END}"
		return 1
	fi
}

function validate_droplet() {
	local remote="$1"
	if [[ $remote =~ ^[a-zA-Z0-9_\-]+$ ]]; then
		return 0
	else
		p "${RED}Remote name can only contain letters, numbers, underscores, and hyphens.${END}"
		return 1
	fi
}

function replace_in_file {
	local filename=$1
	local variable_name=$2
	local replace_with=$3
	local os_type
	os_type=$(uname -s)

	if [[ $os_type == "Darwin" ]]; then
		sed -i '' "s/\$${variable_name}/${replace_with}/g" "$filename"
	elif [[ $os_type == "Linux" ]]; then
		sed -i "s/\$${variable_name}/${replace_with}/g" "$filename"
	fi
}

function wait_for_key() {
	p "${YELLOW}Any key to continue...${END}"
	read -n 1 -s -r
}

function check_doctl() {
	if command -v doctl &>/dev/null; then
		DOCTL_INSTALLED=true
	else
		DOCTL_INSTALLED=false
	fi
}

function check_brew() {
	if command -v brew &>/dev/null; then
		BREW_INSTALLED=true
	else
		BREW_INSTALLED=false
	fi
}

function install_doctl() {
	if $BREW_INSTALLED; then
		if ask_yn "${YELLOW}Would you like to install doctl via Homebrew? (Y/n)${END}"; then
			if [[ "${DEBUG}" == "1" ]]; then
				brew install doctl
			else
				# Hide output and show a simple progress indicator
				(brew install doctl) &>/dev/null &
				show_progress "Installing doctl" $!
			fi
			DOCTL_INSTALLED=true
			return 0
		fi
	fi

	p "${RED}doctl is required to continue. Please install it manually and run setup again.${END}"
	p "${YELLOW}Visit: ${CYAN}https://docs.digitalocean.com/reference/doctl/how-to/install/${END}"

	return 1
}

function ask_yn() {
	local prompt="$1"
	local response

	while true; do
		p "$prompt"
		read -r response
		case "$response" in
		[Yy]* | "")
			return 0
			;;
		[Nn]*)
			return 1
			;;
		*)
			p "${RED}Please answer yes (y) or no (n).${END}"
			;;
		esac
	done
}

function show_progress() {
	local message="$1"
	local pid="$2"
	local spin='-\|/'
	local i=0
	printf "%s " "$message" # Add a space after the message
	while kill -0 $pid 2>/dev/null; do
		i=$(((i + 1) % 4))
		printf "\b${spin:$i:1}"
		sleep .1
	done
	printf "\b...done!\n"
}

function create_droplet() {
	local droplet_name="$1"
	local region="nyc1"
	local image="ubuntu-24-04-x64"

	local size
	size=$(select_droplet_size)

	p "${YELLOW}Creating Droplet...${END}"
	local output
	if [[ "${DEBUG}" == "1" ]]; then
		output=$(doctl compute droplet create "$droplet_name" --region "$region" --size "$size" --image "$image" 2>&1)
	else
		output=$(doctl compute droplet create "$droplet_name" --region "$region" --size "$size" --image "$image" 2>&1)
		show_progress "Creating Droplet" $!
	fi

	# Check if the command was successful
	if [[ $? -ne 0 ]]; then
		p "${RED}Failed to create Droplet. Error: ${output}${END}"
		if [[ $output == *"already exists"* ]]; then
			p "${YELLOW}A Droplet with this name already exists. Please choose a different name.${END}"
		fi
		return 1
	fi

	p "${GRAY}(View Droplet status here: https://cloud.digitalocean.com/droplets)${END}"

	# Wait for the Droplet to be active
	p "${YELLOW}Waiting for Droplet to be ready...${END}"
	local max_attempts=60
	local attempts=0
	while true; do
		status=$(doctl compute droplet get "$droplet_name" --format Status --no-header)
		if [[ "$status" == "active" ]]; then
			break
		fi
		((attempts++))
		if [[ $attempts -ge $max_attempts ]]; then
			p "${RED}Timed out waiting for Droplet to become active. Please check your DigitalOcean dashboard.${END}"
			return 1
		fi
		sleep 5
	done

	# Get the Droplet's IP address
	DROPLET_IP=$(doctl compute droplet get "$droplet_name" --format PublicIPv4 --no-header)
	p "${GREEN}Droplet created successfully with IP: ${DROPLET_IP}${END}"
	return 0
}

function format_size_list() {
	doctl compute size list --format Slug,Memory,Disk,PriceMonthly |
		awk 'NR==1 {next} {print}' |
		sort -k4 -n |
		head -n 3 |
		awk '{printf "%-25s %-10s %-10s $%-10s\n", $1, $2"MB", $3"GB", $4}'
}

function select_droplet_size() {
	local sizes
	sizes=$(format_size_list)

	p "${YELLOW}Available Droplet sizes:${END}"
	echo "$sizes"
	p ""

	local selected_size=""
	local valid_slugs=($(echo "$sizes" | awk '{print $1}'))
	local default_size="${valid_slugs[0]}"

	while true; do
		p "${YELLOW}Enter the slug of the size you want, or press Enter for the smallest size (${default_size}):${END}"
		read -r selected_size

		if [[ -z "$selected_size" ]]; then
			selected_size="$default_size"
			break
		fi

		for slug in "${valid_slugs[@]}"; do
			if [[ "$selected_size" == "$slug" ]]; then
				break 2
			fi
		done

		p "${RED}Invalid size. Please choose from the list above.${END}"
	done

	echo "$selected_size"
}

# Add this function to validate IP addresses
function validate_ip() {
	local ip="$1"
	if [[ $ip =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
		return 0
	else
		p "${RED}Invalid IP address format. Please use xxx.xxx.xxx.xxx format.${END}"
		return 1
	fi
}

# Colors
BLUE_BOLD='\033[1;34m'
BLUE='\033[0;34m'
YELLOW_BOLD='\033[1;33m'
YELLOW='\033[0;33m'
RED_BOLD='\033[1;31m'
RED='\033[0;31m'
DKGRAY='\033[0;30m'
CYAN_BOLD='\033[1;36m'
CYAN='\033[0;36m'
GREEN_BOLD='\033[1;32m'
GREEN='\033[0;32m'
END='\033[0m' # End Color

# Kick it off
main "$@"
